{"version":3,"sources":["core/theme/index.tsx","core/components/Logo/index.tsx","constants.ts","core/components/InitCard/index.tsx","queries/constants.ts","utils/getRandomNumber.ts","queries/fetchPeople.ts","hooks/usePeople.ts","queries/fetchStarships.ts","hooks/useStarships.ts","utils/getPageCount.ts","utils/convertToInteger.ts","contexts/GameContext.tsx","hooks/useGameContext.ts","core/components/GameCard/GameCardContent.tsx","core/components/GameCard/index.tsx","core/components/Playground/index.tsx","core/layouts/Header.tsx","core/layouts/index.tsx","pages/components/Dashboard.tsx","pages/components/Gameboard.tsx","pages/MainPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ThemeConfig","children","theme","createTheme","StyledEngineProvider","injectFirst","ThemeProvider","CssBaseline","Logo","sx","Box","component","src","width","height","INIT_CARD_TITLE","initCards","title","CHARACTER","icon","description","RANDOM","STARSHIP","CharacterTemplate","name","mass","gender","birth_year","StarshipTemplate","crew","model","manufacturer","length","InitCard","selectedCard","onClick","classes","useStyles","Grid","item","xs","sm","md","Card","CardHeader","className","header","CardContent","content","Typography","variant","align","CardActions","Button","fullWidth","makeStyles","textAlign","backgroundColor","palette","grey","display","justifyContent","alignItems","flexDirection","marginBottom","BASE_URL","getRandomNumber","max","Math","floor","random","pageCount","a","page","fetch","response","json","usePeople","useQuery","fetchPeople","enabled","Boolean","data","isLoading","isError","isFetching","refetch","useStarships","fetchStarships","getPageCount","total","ceil","convertToInteger","number","parseInt","GameContext","createContext","GameProvider","useState","resource","setResource","selectedResource","setSelectedResource","peoplePageCount","setPeoplePageCount","peopleData","isLoadingPeopleData","isErrorPeopleData","refetchPeople","starshipPageCount","setStarshipPageCount","starshipsData","isLoadingStarshipsData","isErrorStarshipsData","refetchStarships","gameData","setGameData","first","second","counter","setCounter","useEffect","count","Provider","value","onResourceSelect","type","getResource","getBattleResult","firstPlayer","secondPlayer","firstMass","secondMass","isNaN","firstCrew","secondCrew","useGameContext","context","useContext","Error","GameCardContent","props","gutterBottom","GameCard","root","heading","card","border","isWinner","margin","Playground","onPlayClick","setFirstPlayer","setSecondPlayer","battleResult","setBattleResult","playerTemplate","isPlayerWinner","playerName","includes","results","result","onPlayAgainClick","wrapper","CircularProgress","button","Container","maxWidth","cardsWrapper","actionsButton","padding","Header","AppBar","position","color","elevation","Toolbar","toolbar","noWrap","borderBottom","divider","flexWrap","Layout","Dashboard","container","spacing","map","cardTitle","Gameboard","p","MainPage","isGameActive","setIsGameActive","queryClient","QueryClient","defaultOptions","queries","refetchOnWindowFocus","refetchOnReconnect","retry","staleTime","App","client","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.14c72d7f.chunk.js","sourcesContent":["import { ReactNode } from 'react';\r\n\r\nimport { CssBaseline } from '@mui/material';\r\nimport { createTheme, ThemeProvider, StyledEngineProvider } from '@mui/material/styles';\r\n\r\ntype ThemeConfigProps = {\r\n  children: ReactNode;\r\n};\r\n\r\nexport function ThemeConfig({ children }: ThemeConfigProps) {\r\n  const theme = createTheme();\r\n\r\n  return (\r\n    <StyledEngineProvider injectFirst>\r\n      <ThemeProvider theme={theme}>\r\n        <CssBaseline />\r\n        {children}\r\n      </ThemeProvider>\r\n    </StyledEngineProvider>\r\n  );\r\n}\r\n","import { Box, BoxProps } from '@mui/material';\r\n\r\nexport function Logo({ sx }: BoxProps) {\r\n  return <Box component=\"img\" src=\"/static/logo.svg\" sx={{ width: 40, height: 40, ...sx }} />;\r\n}\r\n","export enum INIT_CARD_TITLE {\r\n  CHARACTER = 'Character',\r\n  RANDOM = 'Random',\r\n  STARSHIP = 'Starship'\r\n}\r\n\r\nexport const initCards = [\r\n  {\r\n    title: INIT_CARD_TITLE.CHARACTER,\r\n    icon: 'people',\r\n    description: 'A person with greater mass wins'\r\n  },\r\n  {\r\n    title: INIT_CARD_TITLE.RANDOM,\r\n    icon: 'question',\r\n    description: 'Random choice between a character and a starship'\r\n  },\r\n  {\r\n    title: INIT_CARD_TITLE.STARSHIP,\r\n    icon: 'rocket',\r\n    description: 'A starship with more crew wins'\r\n  }\r\n];\r\n\r\n// Dummy character when req payload is empty\r\nexport const CharacterTemplate = {\r\n  name: 'Peasant',\r\n  mass: 1,\r\n  gender: 'male',\r\n  birth_year: 'unknown',\r\n  height: 'unknown'\r\n};\r\n\r\n// Dummy starship when req payload is empty\r\nexport const StarshipTemplate = {\r\n  name: 'Solar Satellite',\r\n  crew: 0,\r\n  model: 'satellite',\r\n  manufacturer: 'unknown',\r\n  length: 'unknown'\r\n};\r\n","import { Typography, Button, Card, CardHeader, CardContent, CardActions, Box, Grid, Theme } from '@mui/material';\r\nimport { makeStyles } from '@mui/styles';\r\n\r\nimport { INIT_CARD_TITLE } from '../../../constants';\r\n\r\nexport type InitCardProps = {\r\n  title: INIT_CARD_TITLE;\r\n  icon: string;\r\n  selectedCard: INIT_CARD_TITLE;\r\n  description: string;\r\n\r\n  onClick: (cardTitle: INIT_CARD_TITLE) => void;\r\n};\r\n\r\nexport function InitCard({ title, icon, description, selectedCard, onClick }: InitCardProps) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Grid item xs={12} sm={title === INIT_CARD_TITLE.STARSHIP ? 12 : 6} md={4}>\r\n      <Card>\r\n        <CardHeader className={classes.header} title={title} />\r\n        <CardContent className={classes.content}>\r\n          <Box className={classes.icon} component=\"img\" src={`/static/${icon}.svg`} />\r\n          <Typography component=\"p\" variant=\"subtitle1\" align=\"center\">\r\n            {description}\r\n          </Typography>\r\n        </CardContent>\r\n        <CardActions>\r\n          <Button fullWidth variant={selectedCard === title ? 'contained' : 'outlined'} onClick={() => onClick(title)}>\r\n            Select\r\n          </Button>\r\n        </CardActions>\r\n      </Card>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  header: {\r\n    textAlign: 'center',\r\n    backgroundColor: theme.palette.grey[200]\r\n  },\r\n  content: {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    flexDirection: 'column',\r\n    height: 160\r\n  },\r\n  icon: {\r\n    width: '100%',\r\n    height: 60,\r\n    marginBottom: 15\r\n  }\r\n}));\r\n","export const BASE_URL = 'http://swapi.dev/api';\r\n","export function getRandomNumber(max: number) {\r\n  return Math.floor(Math.random() * (max - 1 + 1)) + 1;\r\n}\r\n","import { BASE_URL } from './constants';\r\nimport { getRandomNumber } from 'src/utils/getRandomNumber';\r\n\r\nexport default async function fetchPeople(pageCount: number) {\r\n  const page = getRandomNumber(pageCount);\r\n  const response = await fetch(`${BASE_URL}/people/?page=${page}`);\r\n\r\n  return response.json();\r\n}\r\n","import { useQuery } from 'react-query';\r\n\r\nimport fetchPeople from 'src/queries/fetchPeople';\r\n\r\nexport const usePeople = (pageCount: number) => {\r\n  const { data, isLoading, isError, isFetching, refetch } = useQuery(\r\n    ['people', pageCount],\r\n    () => fetchPeople(pageCount),\r\n    {\r\n      enabled: Boolean(pageCount)\r\n    }\r\n  );\r\n\r\n  return { data, isLoading, isError, isFetching, refetch };\r\n};\r\n","import { BASE_URL } from './constants';\r\nimport { getRandomNumber } from 'src/utils/getRandomNumber';\r\n\r\nexport default async function fetchStarships(pageCount: number) {\r\n  const page = getRandomNumber(pageCount);\r\n  const response = await fetch(`${BASE_URL}/starships/?page=${page}`);\r\n\r\n  return response.json();\r\n}\r\n","import { useQuery } from 'react-query';\r\n\r\nimport fetchStarships from 'src/queries/fetchStarships';\r\n\r\nexport const useStarships = (pageCount: number) => {\r\n  const { data, isLoading, isError, isFetching, refetch } = useQuery(\r\n    ['starships', pageCount],\r\n    () => fetchStarships(pageCount),\r\n    {\r\n      enabled: Boolean(pageCount)\r\n    }\r\n  );\r\n\r\n  return { data, isLoading, isError, isFetching, refetch };\r\n};\r\n","export function getPageCount(total: number) {\r\n  return Math.ceil(total / 10);\r\n}\r\n","export const convertToInteger = (number: string) => parseInt(number, 10);\r\n","import { createContext, ReactNode, useEffect, useState } from 'react';\r\n\r\nimport { usePeople } from 'src/hooks/usePeople';\r\nimport { useStarships } from 'src/hooks/useStarships';\r\nimport { GameContextType } from './types';\r\nimport { INIT_CARD_TITLE } from 'src/constants';\r\nimport { getPageCount } from 'src/utils/getPageCount';\r\nimport { Character, Starship } from 'src/core/components/types';\r\nimport { convertToInteger } from 'src/utils/convertToInteger';\r\n\r\nfunction getResource(type: INIT_CARD_TITLE) {\r\n  let resource;\r\n\r\n  switch (type) {\r\n    case INIT_CARD_TITLE.CHARACTER:\r\n      resource = INIT_CARD_TITLE.CHARACTER;\r\n      break;\r\n    case INIT_CARD_TITLE.STARSHIP:\r\n      resource = INIT_CARD_TITLE.STARSHIP;\r\n      break;\r\n    case INIT_CARD_TITLE.RANDOM:\r\n      resource = [INIT_CARD_TITLE.CHARACTER, INIT_CARD_TITLE.STARSHIP][Math.floor(Math.random() * 2)];\r\n      break;\r\n    default:\r\n      resource = INIT_CARD_TITLE.CHARACTER;\r\n  }\r\n\r\n  return resource;\r\n}\r\n\r\nconst GameContext = createContext<GameContextType | null>(null);\r\n\r\nfunction GameProvider({ children }: { children: ReactNode }) {\r\n  const [resource, setResource] = useState(INIT_CARD_TITLE.RANDOM);\r\n  // selected resource is used to set proper game\r\n  const [selectedResource, setSelectedResource] = useState(INIT_CARD_TITLE.RANDOM);\r\n  const [peoplePageCount, setPeoplePageCount] = useState(1);\r\n  const {\r\n    data: peopleData,\r\n    isLoading: isLoadingPeopleData,\r\n    isError: isErrorPeopleData,\r\n    refetch: refetchPeople\r\n  } = usePeople(peoplePageCount);\r\n  const [starshipPageCount, setStarshipPageCount] = useState(1);\r\n  const {\r\n    data: starshipsData,\r\n    isLoading: isLoadingStarshipsData,\r\n    isError: isErrorStarshipsData,\r\n    refetch: refetchStarships\r\n  } = useStarships(starshipPageCount);\r\n\r\n  //@todo: Add proper type\r\n  const [gameData, setGameData] = useState<any>(null);\r\n  const [counter, setCounter] = useState<{ first: number; second: number }>({ first: 0, second: 0 });\r\n\r\n  useEffect(() => {\r\n    if (selectedResource === INIT_CARD_TITLE.CHARACTER) {\r\n      setGameData({\r\n        data: peopleData,\r\n        isLoading: isLoadingPeopleData,\r\n        isError: isErrorPeopleData,\r\n        refetch: refetchPeople\r\n      });\r\n    }\r\n\r\n    if (selectedResource === INIT_CARD_TITLE.STARSHIP) {\r\n      setGameData({\r\n        data: starshipsData,\r\n        isLoading: isLoadingStarshipsData,\r\n        isError: isErrorStarshipsData,\r\n        refetch: refetchStarships\r\n      });\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [resource, peopleData, starshipsData]);\r\n\r\n  useEffect(() => {\r\n    if (selectedResource === INIT_CARD_TITLE.CHARACTER && peopleData) {\r\n      setPeoplePageCount(getPageCount(peopleData.count));\r\n    }\r\n\r\n    if (selectedResource === INIT_CARD_TITLE.STARSHIP && starshipsData) {\r\n      setStarshipPageCount(getPageCount(starshipsData.count));\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [resource]);\r\n\r\n  const onResourceSelect = (resource: INIT_CARD_TITLE) => {\r\n    setResource(resource);\r\n    setSelectedResource(getResource(resource));\r\n  };\r\n\r\n  const getBattleResult = (firstPlayer: Character | Starship, secondPlayer: Character | Starship): string => {\r\n    if (selectedResource === INIT_CARD_TITLE.CHARACTER) {\r\n      const firstMass = convertToInteger((firstPlayer as Character).mass);\r\n      const secondMass = convertToInteger((secondPlayer as Character).mass);\r\n\r\n      if (isNaN(firstMass) || isNaN(secondMass)) {\r\n        return 'Unknown result of the battle';\r\n      }\r\n\r\n      if (firstMass > secondMass) {\r\n        setCounter({ ...counter, first: counter.first + 1 });\r\n\r\n        return `The winner is ${firstPlayer.name}`;\r\n      }\r\n\r\n      if (firstMass < secondMass) {\r\n        setCounter({ ...counter, second: counter.second + 1 });\r\n\r\n        return `The winner is ${secondPlayer.name}`;\r\n      }\r\n\r\n      return 'We have draw!';\r\n    }\r\n\r\n    if (selectedResource === INIT_CARD_TITLE.STARSHIP) {\r\n      const firstCrew = convertToInteger((firstPlayer as Starship).crew);\r\n      const secondCrew = convertToInteger((secondPlayer as Starship).crew);\r\n\r\n      if (isNaN(firstCrew) || isNaN(secondCrew)) {\r\n        return 'Unknown result of the battle';\r\n      }\r\n\r\n      if (firstCrew > secondCrew) {\r\n        setCounter({ ...counter, first: counter.first + 1 });\r\n\r\n        return `The winner is ${firstPlayer.name}`;\r\n      }\r\n\r\n      if (firstCrew < secondCrew) {\r\n        setCounter({ ...counter, second: counter.second + 1 });\r\n\r\n        return `The winner is ${secondPlayer.name}`;\r\n      }\r\n\r\n      return 'We have draw!';\r\n    }\r\n\r\n    return 'Something went wrong';\r\n  };\r\n\r\n  return (\r\n    <GameContext.Provider\r\n      value={{\r\n        resource,\r\n        selectedResource,\r\n        onResourceSelect,\r\n        gameData,\r\n        getBattleResult,\r\n        counter,\r\n        setCounter\r\n      }}\r\n    >\r\n      {children}\r\n    </GameContext.Provider>\r\n  );\r\n}\r\n\r\nexport { GameContext, GameProvider };\r\n","import { useContext } from 'react';\r\n\r\nimport { GameContext } from 'src/contexts/GameContext';\r\n\r\nexport const useGameContext = () => {\r\n  const context = useContext(GameContext);\r\n\r\n  if (!context) throw new Error('Game context must be use inside GameProvider');\r\n\r\n  return context;\r\n};\r\n","import { Typography, CardHeader, CardContent, Theme } from '@mui/material';\r\nimport { makeStyles } from '@mui/styles';\r\n\r\nimport { INIT_CARD_TITLE } from 'src/constants';\r\nimport { useGameContext } from 'src/hooks/useGameContext';\r\nimport { GameCardType, Character, Starship } from '../types';\r\n\r\ntype GameCardContentProps = GameCardType;\r\n\r\nexport function GameCardContent(props: GameCardContentProps) {\r\n  const classes = useStyles();\r\n  const { selectedResource } = useGameContext();\r\n\r\n  return selectedResource === INIT_CARD_TITLE.CHARACTER ? (\r\n    <>\r\n      <CardHeader className={classes.header} title={props.name ?? 'Peasant'} />\r\n      <CardContent className={classes.content}>\r\n        <Typography component=\"div\" variant=\"h4\" gutterBottom align=\"center\">\r\n          <strong>Mass: </strong>\r\n          {(props as Character).mass ?? 1}\r\n        </Typography>\r\n        <Typography component=\"p\" variant=\"subtitle1\" align=\"center\">\r\n          <strong>Gender: </strong>\r\n          {(props as Character).gender ?? 'male'}\r\n        </Typography>\r\n        <Typography component=\"p\" variant=\"subtitle1\" align=\"center\">\r\n          <strong>Birth Year: </strong>\r\n          {(props as Character).birth_year ?? 'unknown'}\r\n        </Typography>\r\n        <Typography component=\"p\" variant=\"subtitle1\" align=\"center\">\r\n          <strong>Height: </strong>\r\n          {(props as Character).height ?? 'unknown'}\r\n        </Typography>\r\n      </CardContent>\r\n    </>\r\n  ) : (\r\n    <>\r\n      <CardHeader className={classes.header} title={props.name ?? 'Solar Satellite'} />\r\n      <CardContent className={classes.content}>\r\n        <Typography component=\"div\" variant=\"h4\" gutterBottom align=\"center\">\r\n          <strong>Crew: {(props as Starship).crew ?? 0}</strong>\r\n        </Typography>\r\n        <Typography component=\"p\" variant=\"subtitle1\" align=\"center\">\r\n          Model: {(props as Starship).model ?? 'satellite'}\r\n        </Typography>\r\n        <Typography component=\"p\" variant=\"subtitle1\" align=\"center\">\r\n          Manufacturer: {(props as Starship).manufacturer ?? 'unknown'}\r\n        </Typography>\r\n        <Typography component=\"p\" variant=\"subtitle1\" align=\"center\">\r\n          length: {(props as Starship).length ?? 'unknown'}\r\n        </Typography>\r\n      </CardContent>\r\n    </>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  header: {\r\n    textAlign: 'center',\r\n    backgroundColor: theme.palette.grey[200]\r\n  },\r\n  content: {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    flexDirection: 'column',\r\n    width: 400,\r\n    height: 300\r\n  }\r\n}));\r\n","import { Box, Card, Theme, Typography } from '@mui/material';\r\nimport { makeStyles } from '@mui/styles';\r\n\r\nimport { GameCardType } from '../types';\r\nimport { GameCardContent } from './GameCardContent';\r\n\r\ntype GameCardProps = GameCardType & { heading: string; counter: number; isWinner: boolean };\r\n\r\nexport function GameCard(props: GameCardProps) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Box className={classes.root}>\r\n      <Typography component=\"div\" variant=\"h5\" gutterBottom align=\"center\">\r\n        <strong>{props.heading}</strong>\r\n      </Typography>\r\n      <Card className={classes.card} sx={{ border: `1px solid ${props.isWinner ? 'green' : 'red'}` }}>\r\n        <GameCardContent {...props} />\r\n      </Card>\r\n      <Typography component=\"div\" variant=\"h6\" gutterBottom align=\"center\">\r\n        <strong>Score: </strong>\r\n        {props.counter}\r\n      </Typography>\r\n    </Box>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    flexDirection: 'column'\r\n  },\r\n  card: {\r\n    margin: 10\r\n  },\r\n  header: {\r\n    textAlign: 'center',\r\n    backgroundColor: theme.palette.grey[200]\r\n  },\r\n  content: {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    flexDirection: 'column',\r\n    width: 300,\r\n    height: 300\r\n  }\r\n}));\r\n","import { useEffect, useState } from 'react';\r\n\r\nimport { Button, Container, CircularProgress } from '@mui/material';\r\nimport { makeStyles } from '@mui/styles';\r\n\r\nimport { GameCard } from '../GameCard';\r\nimport { useGameContext } from 'src/hooks/useGameContext';\r\nimport { getRandomNumber } from 'src/utils/getRandomNumber';\r\nimport { GameCardType } from '../types';\r\nimport { CharacterTemplate, INIT_CARD_TITLE, StarshipTemplate } from 'src/constants';\r\n\r\ntype PlaygroundProps = {\r\n  onPlayClick: (isGameActive: boolean) => void;\r\n};\r\n\r\nexport function Playground({ onPlayClick }: PlaygroundProps) {\r\n  const classes = useStyles();\r\n  const { selectedResource, gameData, getBattleResult, counter, setCounter } = useGameContext();\r\n  const [firstPlayer, setFirstPlayer] = useState<GameCardType | null>(null);\r\n  const [secondPlayer, setSecondPlayer] = useState<GameCardType | null>(null);\r\n  const [battleResult, setBattleResult] = useState('');\r\n\r\n  const playerTemplate = selectedResource === INIT_CARD_TITLE.CHARACTER ? CharacterTemplate : StarshipTemplate;\r\n  const isPlayerWinner = (playerName: string) => battleResult.includes(playerName);\r\n\r\n  //@todo: Add proper type\r\n  const { data, isLoading, isError, refetch } = gameData as any;\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      if (!isPlayerWinner(firstPlayer?.name as string)) {\r\n        setFirstPlayer(data.results[getRandomNumber(data?.results?.length ?? 10)] ?? playerTemplate);\r\n      }\r\n\r\n      if (!isPlayerWinner(secondPlayer?.name as string)) {\r\n        setSecondPlayer(data.results[getRandomNumber(data?.results?.length ?? 10)] ?? playerTemplate);\r\n      }\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [data]);\r\n\r\n  useEffect(() => {\r\n    if (firstPlayer && secondPlayer) {\r\n      const result = getBattleResult(firstPlayer, secondPlayer);\r\n\r\n      setBattleResult(result);\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [firstPlayer, secondPlayer]);\r\n\r\n  const onPlayAgainClick = () => () => refetch();\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className={classes.wrapper}>\r\n        <CircularProgress />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (isError) {\r\n    return (\r\n      <div className={classes.wrapper}>\r\n        <span>Cannot get cards. Please try again</span>\r\n        <Button className={classes.button} variant=\"contained\" onClick={() => onPlayAgainClick()}>\r\n          Play Again\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" component=\"main\" className={classes.root}>\r\n      <h2 className={classes.result}>{battleResult}</h2>\r\n      <div className={classes.cardsWrapper}>\r\n        <GameCard\r\n          {...(firstPlayer as GameCardType)}\r\n          heading=\"You\"\r\n          counter={counter.first}\r\n          isWinner={isPlayerWinner(firstPlayer?.name as string)}\r\n        />\r\n        vs.\r\n        <GameCard\r\n          {...(secondPlayer as GameCardType)}\r\n          heading=\"Computer\"\r\n          counter={counter.second}\r\n          isWinner={isPlayerWinner(secondPlayer?.name as string)}\r\n        />\r\n      </div>\r\n      <div className={classes.actionsButton}>\r\n        <Button className={classes.button} variant=\"contained\" onClick={onPlayAgainClick()}>\r\n          Play Again\r\n        </Button>\r\n        <Button\r\n          className={classes.button}\r\n          variant=\"contained\"\r\n          onClick={() => {\r\n            onPlayClick(false);\r\n            setCounter({ first: 0, second: 0 });\r\n          }}\r\n        >\r\n          Start New Game\r\n        </Button>\r\n      </div>\r\n    </Container>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  root: {\r\n    padding: 20\r\n  },\r\n  result: {\r\n    textAlign: 'center'\r\n  },\r\n  cardsWrapper: {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center'\r\n  },\r\n  actionsButton: {\r\n    display: 'flex',\r\n    justifyContent: 'center'\r\n  },\r\n  button: {\r\n    margin: 15\r\n  },\r\n  wrapper: {\r\n    width: '100%',\r\n    height: '50vh',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center'\r\n  }\r\n}));\r\n","import React from 'react';\r\n\r\nimport { AppBar, Toolbar, Typography, Theme } from '@mui/material';\r\nimport { makeStyles } from '@mui/styles';\r\n\r\nimport { Logo } from '../components';\r\n\r\nexport function Header() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <AppBar className={classes.header} position=\"static\" color=\"default\" elevation={0}>\r\n      <Toolbar className={classes.toolbar}>\r\n        <Typography variant=\"h6\" color=\"inherit\" noWrap>\r\n          <Logo />\r\n        </Typography>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  header: {\r\n    borderBottom: `1px solid ${theme.palette.divider}`\r\n  },\r\n  toolbar: {\r\n    flexWrap: 'wrap'\r\n  }\r\n}));\r\n","import { ReactNode } from 'react';\r\n\r\nimport { Header } from './Header';\r\n\r\ntype LayoutProps = {\r\n  children: ReactNode;\r\n};\r\n\r\nexport function Layout({ children }: LayoutProps) {\r\n  return (\r\n    <>\r\n      <Header />\r\n\r\n      {children}\r\n    </>\r\n  );\r\n}\r\n","import { Container, Typography, Grid, Button } from '@mui/material';\r\nimport { makeStyles } from '@mui/styles';\r\n\r\nimport { useGameContext } from 'src/hooks/useGameContext';\r\nimport { InitCard, InitCardProps } from 'src/core/components';\r\nimport { initCards, INIT_CARD_TITLE } from 'src/constants';\r\n\r\ntype DashboardProps = {\r\n  onPlayClick: (isGameActive: boolean) => void;\r\n};\r\n\r\nexport function Dashboard({ onPlayClick }: DashboardProps) {\r\n  const classes = useStyles();\r\n  const { resource, onResourceSelect } = useGameContext();\r\n\r\n  return (\r\n    <Container className={classes.root} maxWidth=\"lg\" component=\"main\">\r\n      <Typography component=\"h1\" variant=\"h2\" align=\"center\" color=\"text.primary\" gutterBottom>\r\n        Star Wars Card Game\r\n      </Typography>\r\n      <Typography variant=\"h5\" align=\"center\" color=\"text.secondary\" component=\"p\">\r\n        Choose one of the resources and participate in the galactic battle!\r\n      </Typography>\r\n      <Grid className={classes.cardsWrapper} container spacing={5} alignItems=\"flex-start\">\r\n        {initCards.map((card: Pick<InitCardProps, 'title' | 'icon' | 'description'>) => (\r\n          <InitCard\r\n            key={card.title}\r\n            {...card}\r\n            selectedCard={resource}\r\n            onClick={(cardTitle: INIT_CARD_TITLE) => onResourceSelect(cardTitle)}\r\n          />\r\n        ))}\r\n      </Grid>\r\n      <Button className={classes.button} variant=\"contained\" onClick={() => onPlayClick(true)}>\r\n        Play\r\n      </Button>\r\n    </Container>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    padding: 40\r\n  },\r\n  cardsWrapper: {\r\n    padding: 30\r\n  },\r\n  button: {\r\n    height: 50,\r\n    width: 100\r\n  }\r\n}));\r\n","import { Container, Typography } from '@mui/material';\r\n\r\nimport { Playground } from 'src/core/components';\r\nimport { useGameContext } from 'src/hooks/useGameContext';\r\n\r\ntype GameboardProps = {\r\n  onPlayClick: (isGameActive: boolean) => void;\r\n};\r\n\r\nexport function Gameboard({ onPlayClick }: GameboardProps) {\r\n  const { selectedResource } = useGameContext();\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" component=\"main\" sx={{ p: 5 }}>\r\n      <Typography component=\"h1\" variant=\"h2\" align=\"center\" color=\"text.primary\" gutterBottom>\r\n        {`${selectedResource} Battle`}\r\n      </Typography>\r\n\r\n      <Playground onPlayClick={onPlayClick} />\r\n    </Container>\r\n  );\r\n}\r\n","import { useState } from 'react';\r\n\r\nimport { Dashboard } from './components/Dashboard';\r\nimport { Gameboard } from './components/Gameboard';\r\n\r\nexport default function MainPage() {\r\n  const [isGameActive, setIsGameActive] = useState(false);\r\n\r\n  return isGameActive ? <Gameboard onPlayClick={setIsGameActive} /> : <Dashboard onPlayClick={setIsGameActive} />;\r\n}\r\n","import { QueryClient, QueryClientProvider } from 'react-query';\r\n\r\nimport { ThemeConfig } from './core/theme';\r\nimport { Layout } from './core/layouts';\r\nimport MainPage from './pages/MainPage';\r\nimport { GameProvider } from './contexts/GameContext';\r\n\r\nexport const queryClient = new QueryClient({\r\n  defaultOptions: {\r\n    queries: {\r\n      refetchOnWindowFocus: false,\r\n      refetchOnReconnect: false,\r\n      retry: false,\r\n      staleTime: 5 * 60 * 1000\r\n    }\r\n  }\r\n});\r\n\r\nexport function App() {\r\n  return (\r\n    <QueryClientProvider client={queryClient}>\r\n      <GameProvider>\r\n        <ThemeConfig>\r\n          <Layout>\r\n            <MainPage />\r\n          </Layout>\r\n        </ThemeConfig>\r\n      </GameProvider>\r\n      {/* react query for develop */}\r\n      {/* <ReactQueryDevtools initialIsOpen={false} /> */}\r\n    </QueryClientProvider>\r\n  );\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport { App } from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}